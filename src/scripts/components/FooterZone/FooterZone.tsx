/**
 * FooterZone ‚Äî Moldura do Rodap√© da P√°gina.
 *
 * @description
 * Container destinado ao rodap√© da p√°gina. Pode conter toolbars,
 * bot√µes, informa√ß√µes institucionais, links, copyright ou
 * qualquer conte√∫do relacionado ao footer.
 *
 * @structure
 * ```
 * ‚îú‚îÄ‚îÄ (FooterZone)
 * ‚îÇ     ‚îî‚îÄ‚îÄ [AnyComponent+]
 * ```
 *
 * @integration
 * - Compatibilidade com:
 *   ‚Ä¢ AnyComponent
 *   ‚Ä¢ NavIcon
 *   ‚Ä¢ MenuX / ButtonX
 * - Faz parte da hierarquia da p√°gina:
 *   ‚Ä¢ HeaderZone ‚Üí ContentWrapper ‚Üí FooterZone
 * - Extende SectionWrapperBase
 *
 * @layout
 * - Modos:
 *   ‚Ä¢ Fixed: Fixa no rodap√© (opcional)
 *   ‚Ä¢ Static: Fluxo normal no documento (padr√£o) mas for√ßa ficar alinhado ao bottom da janela vis√≠vel quando conte√∫do for insuficiente
 * - Largura:
 *   ‚Ä¢ Full (100%)
 *   ‚Ä¢ Container (centralizado, m√°x. 1280px)
 * - Altura:
 *   ‚Ä¢ Adapt√°vel ao conte√∫do
 *
 * @style
 * - Arquitetura CSS:
 *   ‚Ä¢ Base: DaisyUI + Tailwind Variants.
 *   ‚Ä¢ Wrapper: `footer-jcem`.
 *   ‚Ä¢ Escopo: classes `footer-jcem-{escopo}`.
 * - Composi√ß√£o segura com `tailwind-merge` e `clsx`.
 * - Temas:
 *   ‚Ä¢ Segue os tokens/temas do Tailwind + DaisyUI
 * - Customiza√ß√£o:
 *   ‚Ä¢ Classes podem ser sobrescritas
 * - Estados:
 *   ‚Ä¢ Controlados via data-attributes e pseudo-classes
 *   ‚Ä¢ Transi√ß√µes CSS-only
 *
 * @props
 * - `shadow`: boolean (default true)
 * - `container`: boolean (default false) ‚Üí ativa largura limitada
 * - `escopo`: string (namespace de dados e classes)
 * - `className`: classes adicionais
 * - `wrapperClass`: classes do container interno
 *
 * @behavior
 * - Prioridades:
 *   1. Acessibilidade (aria-label quando aplic√°vel)
 *   2. Consist√™ncia visual (estados :hover, :active , ..., via CSS)
 *   3. Performance (zero JS para estado/anima√ß√µes/transi√ß√µes)
 *
 * @development
 * - Mant√©m consist√™ncia total com HeaderBar, NavIcon, ButtonX e MenuX.
 * - Usa helper `resolveClassName()` para tratamento de classes.
 * - Boas pr√°ticas:
 *   ‚Ä¢ Mensagens de log/warn/error via Logger
 *   ‚Ä¢ Manuten√ß√£o git-friendly (evitar breaking changes)
 *   ‚Ä¢ Coment√°rios objetivos para mudan√ßas complexas
 *   ‚Ä¢ Manter esta documenta√ß√£o no topo c√≥digo com ajustes m√≠nimos pertinentes
 *   ‚Ä¢ Coment√°rio de uma √∫nica linha prefer√≠veis, exceto quando para jsDoc
 *
 * @dependencies
 * - ButtonX
 * - Preact + Vite (core)
 * - tailwind-variants + tailwind-merge + clsx
 */
import {
	SectionWrapperBase,
	ISectionWrapperBase,
} from '../SectionWrapperBase/SectionWrapperBase';

/** Props do FooterZone */
export interface IFooterZone
	extends Omit<ISectionWrapperBase, 'as' | 'stack'> {}

/** üî• FooterZone */
export function FooterZone({
	escopo = 'footer',
	shadow = true,
	container = false,
	debug = false,
	children,
	...props
}: IFooterZone) {
	return (
		<SectionWrapperBase
			{...props}
			escopo={escopo}
			as="footer"
			stack={true}
			shadow={shadow}
			container={container}
			className="fzone-jcem"
			debug={debug}
		>
			{children}
		</SectionWrapperBase>
	);
}

FooterZone.displayName = 'FooterZone';
