/**
 * HeaderBar ‚Äî Cabe√ßalho flex√≠vel, responsivo e compon√≠vel.
 *
 * @description
 * Componente de cabe√ßalho (geralmente em forma de barra horizontal) que organiza conte√∫dos em tr√™s se√ß√µes horizontais:
 * - Esquerda (`navbar-start`)
 * - Centro (`navbar-center`)
 * - Direita (`navbar-end`)
 *
 *
 * @structure
 * Layout geral:
 * ```
 * [HeaderBar]
 *  ‚îú‚îÄ‚îÄ [navbar-start]  ‚Üí leftItems
 *  ‚îú‚îÄ‚îÄ [navbar-center] ‚Üí title | middleContent
 *  ‚îî‚îÄ‚îÄ [navbar-end]    ‚Üí rightItems + searchComponent
 * ```
 *
 * @integration
 * - Totalmente integrado com:
 *   ‚Ä¢ ButtonX
 *   ‚Ä¢ MenuX
 *   ‚Ä¢ NavIcon
 *   ‚Ä¢ PageZone
 * - Pode ser usado como cabe√ßalho de p√°ginas, m√≥dulos, dashboards, apps.
 * - Opcionalmente, via par√¢metro, pode fixar-se (empilhado) ao topo (styck) na mesma ordem de renderiza√ß√£o.
 * - Suporte a bot√µes (`ButtonX`), menus (`MenuX`) e barras (`NavIcon`).
 * - Cada se√ß√µes pode receber qualquer tipo de componente, inclusive puro HTML*
 *
 * @layout
 * - Variante visual (`variant`):
 *   ‚Ä¢ normal | sticky | ghost | bordered
 * - Tamanho (`size`):
 *   ‚Ä¢ xs | sm | md | lg | xl
 * - Sombra (`shadow`):
 *   ‚Ä¢ none | sm | md | lg | xl | 2xl
 * - Compacta√ß√£o (`compact`):
 *   ‚Ä¢ padding e gaps reduzidos
 * - Alinhamento do t√≠tulo (`titleAlign`):
 *   ‚Ä¢ left | center | right
 * - Classes:
 *   ‚Ä¢ Wrapper: `header-jcem-{escopo}`
 * - Responsivo e adapt√°vel ao contexto.
 * - Overflow: Nunca usa scrollbar ‚Üí cria submenus ou colapsa.
 * - Largura: 100% do espa√ßo disponivel
 *
 * @style
 * - Arquitetura CSS:
 *   ‚Ä¢ DaisyUI + Tailwind Variants + Tailwind Merge + clsx
 *   ‚Ä¢ Wrapper: `header-jcem-`.
 *   ‚Ä¢ Escopo: classes `header-jcem-{escopo}`.
 * - Composi√ß√£o segura com `tailwind-merge` e `clsx`
 * - Customiza√ß√£o:
 *   ‚Ä¢ Classes podem ser sobrescritas
 * - Estados:
 *   ‚Ä¢ Controlados via data-attributes e pseudo-classes
 *   ‚Ä¢ Transi√ß√µes CSS-only
 *
 * @props
 * - `leftItems`: itens √† esquerda (ButtonX | MenuX | NavIcon[])
 * - `rightItems`: itens √† direita (ButtonX | MenuX | NavIcon[])
 * - `middleContent`: conte√∫do customizado no centro (JSX.Element)
 * - `title`: texto do t√≠tulo central
 * - `searchComponent`: JSX.Element de busca na direita
 * - `variant`, `size`, `shadow`, `compact`: estiliza√ß√£o
 * - `escopo`: namespace de classes/data-attributes
 * - `classPart`: string para personaliza√ß√£o de classe
 * - `className`: classes adicionais
 *
 * @development
 * - Mant√©m consist√™ncia total com `NavIcon`, `ButtonX` e `MenuX`.
 * - Quando se√ß√£o receber apenas ButtonX/MenuX ou recebe outros tipo, por·∫Ωm com v√°rios ButtonX/MenuX sequencias: encapsula ButtonX/MenuX
 *
 * - Usa helper `resolveClassName()` para tratamento de classes.
 * - Boas pr√°ticas:
 *   ‚Ä¢ Mensagens de log/warn/error via Logger
 *   ‚Ä¢ Manuten√ß√£o git-friendly (evitar breaking changes)
 *   ‚Ä¢ Coment√°rios objetivos para mudan√ßas complexas
 *   ‚Ä¢ Manter esta documenta√ß√£o no topo c√≥digo com ajustes m√≠nimos pertinentes
 *   ‚Ä¢ Coment√°rio de uma √∫nica linha prefer√≠veis, exceto quando para jsDoc
 *   ‚Ä¢ Altera√ß√£o de coment√°rios devem ser feitos apenas quando realmente necess√°rios
 *   ‚Ä¢ Estrutura sequ√™ncial', tais com ordme de include, devem ser mantidas - iguais exceto quando impossƒ©vel
 *   ‚Ä¢ Mantem tratamento com fun√ß√µes/helper j√£ existentes
 *
 * @style
 * - Arquitetura CSS:
 *   ‚Ä¢ DaisyUI + Tailwind Variants + Tailwind Merge + clsx
 * - Segue a conven√ß√£o `header-jcem-{escopo}`
 *
 * @dependencies
 * - ButtonX
 * - MenuX
 * - NavIcon
 * - Preact + Vite (core)
 * - ButtonX (bot√£o principal)
 * - NavIcon (container dos itens)
 * - tailwind-variants + tailwind-merge + clsx
 *
 * @see {@link ButtonX}
 * @see {@link MenuX}
 * @see {@link NavIcon}
 */

import { JSX } from 'preact';
import { TButtonX } from '../ButtonX/ButtonX';
import { IMenuX } from '../MenuX/MenuX';
import { INavIcon, NavIcon, TNavItem } from '../NavIcon/NavIcon';
import {
	TUISizes,
	TUIShadow,
	resolveClassName,
} from '../../ts/common/ui';
import clsx from 'clsx';
import { twMerge } from 'tailwind-merge';

/** Tipo de itens permitidos no Header */
export type TBarItem = TButtonX | IMenuX | INavIcon;

/** Props do HeaderBar */
export interface IHeader
	extends Omit<JSX.HTMLAttributes<HTMLElement>, 'size'> {
	classPart?: string;
	leftItems?: TBarItem[];
	rightItems?: TBarItem[];
	middleContent?: JSX.Element;
	title?: string;
	titleAlign?: 'left' | 'center' | 'right';
	searchComponent?: JSX.Element;
	variant?: 'normal' | 'sticky' | 'ghost' | 'bordered';
	size?: TUISizes;
	shadow?: TUIShadow;
	compact?: boolean;
	escopo?: string;
}

/** üîß Mapeamento de tamanhos ‚Üí Tailwind */
const sizeMap = {
	xs: 'text-xs',
	sm: 'text-sm',
	md: 'text-md',
	lg: 'text-lg',
	xl: 'text-xl',
} as const;

/** üîß Mapeamento de sombras ‚Üí Tailwind */
const shadowMap = {
	none: '',
	sm: 'shadow-sm',
	md: 'shadow-md',
	lg: 'shadow-lg',
	xl: 'shadow-xl',
	'2xl': 'shadow-2xl',
} as const;

/** üî• Filtro seguro ‚Üí Extrai apenas ButtonX e MenuX (NavItems) */
const filterNavItems = (items: TBarItem[]): TNavItem[] =>
	items.filter(
		(i): i is TNavItem => 'onClick' in i || 'itens' in i, // Button ou Menu
	);

/** üîß Configura√ß√£o NavIcon padr√£o para Header */
const getNavIconConfig = (items: TNavItem[], compact: boolean) => ({
	itens: items,
	orientation: 'horizontal' as const,
	ulClass: clsx(
		'items-center',
		compact ? 'gap-1' : 'gap-2',
		'sm:gap-3',
	),
	className: 'h-full',
});

export function HeaderBar({
	classPart = '',
	leftItems = [],
	rightItems = [],
	middleContent,
	title,
	titleAlign = 'left',
	searchComponent,
	variant = 'normal',
	size = 'sm',
	shadow = 'none',
	compact = false,
	escopo = 'header',
	className,
	...props
}: IHeader) {
	/** üé® Classes do Header */
	const headerClasses = twMerge(
		clsx(
			'navbar min-h-12 w-full',
			variant !== 'normal' && `navbar-${variant}`,
			sizeMap[size],
			shadowMap[shadow],
			compact ? 'py-1 px-2' : 'py-2 px-4',
			`header-jcem-${escopo}`,
			classPart && `header-${classPart}`,
		),
		resolveClassName(className),
	);

	return (
		<header {...props} className={headerClasses}>
			{/* üÖ∞Ô∏è Esquerda */}
			{leftItems.length > 0 && (
				<div className="navbar-start h-full">
					<NavIcon
						{...getNavIconConfig(filterNavItems(leftItems), compact)}
						escopo="header-left"
						className={twMerge(
							'mr-auto',
							leftItems.some((i) => 'itens' in i) && 'relative',
						)}
					/>
				</div>
			)}

			{/* üÖ±Ô∏è Centro */}
			<div
				className={clsx('navbar-center h-full flex-1', {
					'text-left': titleAlign === 'left',
					'text-center': titleAlign === 'center',
					'text-right': titleAlign === 'right',
				})}
			>
				{title ?
					<h1
						className={clsx(
							'font-semibold whitespace-nowrap',
							compact ? 'text-sm' : 'text-lg',
							'max-w-[180px] sm:max-w-md md:max-w-lg truncate',
						)}
					>
						{title}
					</h1>
				:	middleContent && (
						<div className="h-full flex items-center">
							{middleContent}
						</div>
					)
				}
			</div>

			{/* üÖ≤ Direita */}
			<div className="navbar-end h-full">
				{searchComponent && (
					<div
						className={clsx(
							'h-full flex items-center mr-2',
							compact ? 'max-w-[120px]' : 'max-w-[160px]',
							'sm:max-w-[200px]',
						)}
					>
						{searchComponent}
					</div>
				)}

				{rightItems.length > 0 && (
					<NavIcon
						{...getNavIconConfig(filterNavItems(rightItems), compact)}
						escopo="header-right"
						className={twMerge(
							'ml-auto',
							rightItems.some((i) => 'itens' in i) && 'relative',
						)}
					/>
				)}
			</div>
		</header>
	);
}
